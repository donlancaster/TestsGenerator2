using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TestsGeneratorLib
{
    class Generator
    {
        public List<TestUnit> CreateTests(string source)
        {
            List<TestUnit> list = new List<TestUnit>();





            return list;
        }

        public SyntaxList<UsingDirectiveSyntax> GetImports()
        {
            List<UsingDirectiveSyntax> defaultUsages = new List<UsingDirectiveSyntax>
            {
                UsingDirective(QualifiedName(
                    QualifiedName(QualifiedName(IdentifierName("Microsoft"), IdentifierName("VisualStudio")),
                        IdentifierName("TestTools")), IdentifierName("UnitTesting")))
            };
            return List(defaultUsages);
        }

        private ClassDeclarationSyntax CreateTestClass(string className)
        {
           
        }


        private MethodDeclarationSyntax CreateTestMethod(string methodName)
        {
          
        }

        private StatementSyntax[] EmptyTestSyntax()
        {
            return new[] { ParseStatement("Assert.Fail(\"autogenerated\");") };
        }

    }
}
